#ifndef DRIVER_DIO_H
#define DRIVER_DIO_H
namespace driver {
enum{//1位的端口编号
  P00=0X00,
  P01,
  P02,
  P03,
  P04,
  P05,
  P06,
  P07,

  P10=0X10,
  P11,
  P12,
  P13,
  P14,
  P15,
  P16,
  P17,

  P20=0X20,
  P21,
  P22,
  P23,
  P24,
  P25,
  P26,
  P27,

  P30=0X30,
  P31,
  P32,
  P33,
  P34,
  P35,
  P36,
  P37,

  P40=0X40,
  P41,
  P42,
  P43,
  P44,
  P45,
  P46,
  P47,

  P50=0X50,
  P51,
  P52,
  P53,
  P54,
  P55,
  P56,
  P57,
};

enum{//8位的端口编号
  P0=0,
  P1,
  P2,
  P3,
  P4,
  P5
};

class DIO
{
public:


  //设置虚析构函数
  virtual ~DIO(){}


  /**********************************************************************
   * 函数:virtual void set(int value,int port)
   * 描述:设置1位端口值
   * 输入:int value:端口值
   * 输入:Port port:端口编号
   * **********************************************************************/
  virtual void set(int value,int port)=0;

  /**********************************************************************
   * 函数:virtual int get(int port)
   * 描述:获取1位端口值
   * 输入:Port port:端口编号
   * 返回:1位端口值
   * **********************************************************************/
  virtual int get(int port)=0;

  /**********************************************************************
   * 函数:virtual void set8(bool value,int port)
   * 描述:设置8位端口值
   * 输入:int value:端口值
   * 输入:Port8 port:端口编号
   * **********************************************************************/
  virtual void set8(int value, int port)=0;

  /**********************************************************************
   * 函数:virtual int get8(int port)
   * 描述:获取8位端口值
   * 输入:int port:端口编号
   * 返回:8位端口值
   * **********************************************************************/
  virtual int get8(int port)=0;
};
}
#endif // DRIVER_DIO_H
